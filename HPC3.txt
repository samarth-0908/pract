Implement Min, Max, Sum and Average operations using Parallel Reduction.
g++ -fopenmp filename.cpp -o filename
./filename


    #include <iostream>
    #include <vector>
    #include <cstdlib>
    #include <limits>
    #include <omp.h>
    
    using namespace std;
    
    int main() {
        const int SIZE = 1000000; // Array size (1 million elements)
        vector<int> data(SIZE);
    
        // Fill array with random integers between 1 and 1000
        for (int i = 0; i < SIZE; ++i)
            data[i] = rand() % 1000 + 1;
    
        int minVal = INT_MAX;
        int maxVal = INT_MIN;
        long long sum = 0;
    
        // Parallel reduction for min, max, and sum
        #pragma omp parallel for reduction(min:minVal) reduction(max:maxVal) reduction(+:sum)
        for (int i = 0; i < SIZE; ++i) {
            if (data[i] < minVal) minVal = data[i];   // Track minimum value
            if (data[i] > maxVal) maxVal = data[i];   // Track maximum value
            sum += data[i];                           // Accumulate sum
        }
    
        double average = static_cast<double>(sum) / SIZE;
    
        // Output results
        cout << "Minimum value: " << minVal << endl;
        cout << "Maximum value: " << maxVal << endl;
        cout << "Sum: " << sum << endl;
        cout << "Average: " << average << endl;
    
        return 0;
    }
    
