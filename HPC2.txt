Write a program to implement Parallel Bubble Sort and Merge sort using OpenMP. Use existing algorithms and measure the performance of sequential and parallel algorithms.


    #include <iostream>
    #include <vector>
    #include <cstdlib>
    #include <chrono>
    #include <omp.h>
    
    using namespace std;
    using namespace chrono;
    
    // Sequential Bubble Sort
    void bubbleSort(vector<int>& arr) {
        int n = arr.size();
        for (int i = 0; i < n - 1; ++i)
            for (int j = 0; j < n - i - 1; ++j)
                if (arr[j] > arr[j + 1])
                    swap(arr[j], arr[j + 1]);
    }
    
    // Parallel Bubble Sort using Odd-Even Transposition
    void parallelBubbleSort(vector<int>& arr) {
        int n = arr.size();
        for (int i = 0; i < n; ++i) {
            int phase = i % 2;
            #pragma omp parallel for
            for (int j = phase; j < n - 1; j += 2)
                if (arr[j] > arr[j + 1])
                    swap(arr[j], arr[j + 1]);
        }
    }
    
    // Merge two sorted halves
    void merge(vector<int>& arr, int l, int m, int r) {
        vector<int> temp;
        int i = l, j = m + 1;
        while (i <= m && j <= r)
            temp.push_back(arr[i] < arr[j] ? arr[i++] : arr[j++]);
        while (i <= m) temp.push_back(arr[i++]);
        while (j <= r) temp.push_back(arr[j++]);
        for (int k = 0; k < temp.size(); ++k)
            arr[l + k] = temp[k];
    }
    
    // Sequential Merge Sort
    void mergeSort(vector<int>& arr, int l, int r) {
        if (l < r) {
            int m = (l + r) / 2;
            mergeSort(arr, l, m);
            mergeSort(arr, m + 1, r);
            merge(arr, l, m, r);
        }
    }
    
    // Parallel Merge Sort using OpenMP sections
    void parallelMergeSort(vector<int>& arr, int l, int r) {
        if (l < r) {
            int m = (l + r) / 2;
            #pragma omp parallel sections
            {
                #pragma omp section
                parallelMergeSort(arr, l, m);
                #pragma omp section
                parallelMergeSort(arr, m + 1, r);
            }
            merge(arr, l, m, r);
        }
    }
    
    int main() {
        const int SIZE = 100000;
        vector<int> original(SIZE);
        for (int& x : original) x = rand() % 100000;
    
        // Sequential Bubble Sort
        auto arr = original;
        auto start = high_resolution_clock::now();
        bubbleSort(arr);
        auto end = high_resolution_clock::now();
        cout << "Sequential Bubble Sort: " << duration<double>(end - start).count() << "s\n";
    
        // Parallel Bubble Sort
        arr = original;
        start = high_resolution_clock::now();
        parallelBubbleSort(arr);
        end = high_resolution_clock::now();
        cout << "Parallel Bubble Sort: " << duration<double>(end - start).count() << "s\n";
    
        // Sequential Merge Sort
        arr = original;
        start = high_resolution_clock::now();
        mergeSort(arr, 0, SIZE - 1);
        end = high_resolution_clock::now();
        cout << "Sequential Merge Sort: " << duration<double>(end - start).count() << "s\n";
    
        // Parallel Merge Sort
        arr = original;
        start = high_resolution_clock::now();
        #pragma omp parallel
        {
            #pragma omp single
            parallelMergeSort(arr, 0, SIZE - 1);
        }
        end = high_resolution_clock::now();
        cout << "Parallel Merge Sort: " << duration<double>(end - start).count() << "s\n";
    
        return 0;
    }

