Write a CUDA Program for : 1. Addition of two large vectors 2. Matrix Multiplication using CUDA C
nvcc filname.cu -o filename
./filename


    // combined_cuda.cu
    #include <iostream>
    #include <cuda_runtime.h>
    using namespace std;
    
    #define N 512  // Matrix dimension (N x N)
    #define VEC_SIZE (1 << 20) // 1 million elements
    
    // ----------- Vector Addition Kernel -----------
    __global__ void vectorAdd(int* A, int* B, int* C, int n) {
        int i = blockIdx.x * blockDim.x + threadIdx.x;
        if (i < n)
            C[i] = A[i] + B[i];
    }
    
    // ----------- Matrix Multiplication Kernel -----------
    __global__ void matMul(int* A, int* B, int* C, int n) {
        int row = blockIdx.y * blockDim.y + threadIdx.y;
        int col = blockIdx.x * blockDim.x + threadIdx.x;
        if (row < n && col < n) {
            int sum = 0;
            for (int k = 0; k < n; ++k)
                sum += A[row * n + k] * B[k * n + col];
            C[row * n + col] = sum;
        }
    }
    
    int main() {
        // ========================= VECTOR ADDITION =========================
        cout << "----- Vector Addition -----\n";
        int *h_A = new int[VEC_SIZE];
        int *h_B = new int[VEC_SIZE];
        int *h_C = new int[VEC_SIZE];
    
        for (int i = 0; i < VEC_SIZE; i++) {
            h_A[i] = i;
            h_B[i] = 2 * i;
        }
    
        int *d_A, *d_B, *d_C;
        cudaMalloc(&d_A, VEC_SIZE * sizeof(int));
        cudaMalloc(&d_B, VEC_SIZE * sizeof(int));
        cudaMalloc(&d_C, VEC_SIZE * sizeof(int));
    
        cudaMemcpy(d_A, h_A, VEC_SIZE * sizeof(int), cudaMemcpyHostToDevice);
        cudaMemcpy(d_B, h_B, VEC_SIZE * sizeof(int), cudaMemcpyHostToDevice);
    
        int threads = 256;
        int blocks = (VEC_SIZE + threads - 1) / threads;
        vectorAdd<<<blocks, threads>>>(d_A, d_B, d_C, VEC_SIZE);
    
        cudaMemcpy(h_C, d_C, VEC_SIZE * sizeof(int), cudaMemcpyDeviceToHost);
    
        cout << "First 5 vector addition results:\n";
        for (int i = 0; i < 5; i++)
            cout << h_C[i] << " ";
        cout << "\n";
    
        cudaFree(d_A); cudaFree(d_B); cudaFree(d_C);
        delete[] h_A; delete[] h_B; delete[] h_C;
    
        // ========================= MATRIX MULTIPLICATION =========================
        cout << "\n----- Matrix Multiplication (" << N << " x " << N << ") -----\n";
        size_t bytes = N * N * sizeof(int);
    
        int *h_MA = new int[N * N];
        int *h_MB = new int[N * N];
        int *h_MC = new int[N * N];
    
        for (int i = 0; i < N * N; i++) {
            h_MA[i] = 1;
            h_MB[i] = 2;
        }
    
        int *d_MA, *d_MB, *d_MC;
        cudaMalloc(&d_MA, bytes);
        cudaMalloc(&d_MB, bytes);
        cudaMalloc(&d_MC, bytes);
    
        cudaMemcpy(d_MA, h_MA, bytes, cudaMemcpyHostToDevice);
        cudaMemcpy(d_MB, h_MB, bytes, cudaMemcpyHostToDevice);
    
        dim3 blockDim(16, 16);
        dim3 gridDim((N + 15) / 16, (N + 15) / 16);
        matMul<<<gridDim, blockDim>>>(d_MA, d_MB, d_MC, N);
    
        cudaMemcpy(h_MC, d_MC, bytes, cudaMemcpyDeviceToHost);
    
        cout << "First 5 matrix multiplication results:\n";
        for (int i = 0; i < 5; i++)
            cout << h_MC[i] << " ";
        cout << "\n";
    
        cudaFree(d_MA); cudaFree(d_MB); cudaFree(d_MC);
        delete[] h_MA; delete[] h_MB; delete[] h_MC;
    
        return 0;
    }

