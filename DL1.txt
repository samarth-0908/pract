Linear regression by using Deep Neural network: Implement Boston housing price predictionproblem by Linear regression using Deep Neural network. Use Boston House price predictiondataset.


    import pandas as pd
    import numpy as np
    from sklearn.model_selection import train_test_split
    from sklearn.preprocessing import StandardScaler
    import tensorflow as tf
    from tensorflow.keras.models import Sequential
    from tensorflow.keras.layers import Dense
    
    # Load dataset
    df = pd.read_csv("boston.csv")
    
    # View basic information
    print("Dataset Info:")
    df.info()
    
    print("\nFirst 5 rows:")
    print(df.head())
    
    print("\nLast 5 rows:")
    print(df.tail())
    
    print("\nStatistical Summary:")
    print(df.describe())
    
    # Drop any missing or duplicate values
    df.dropna(inplace=True)
    df.drop_duplicates(inplace=True)
    
    # Separate features and target
    X = df.drop("MEDV", axis=1)  # MEDV is the target variable (house price)
    y = df["MEDV"]
    
    # Normalize features
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)
    
    # Split into training and test sets
    X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)
    
    # Build DNN model
    model = Sequential([
        Dense(128, activation='relu', input_shape=(X_train.shape[1],)),
        Dense(64, activation='relu'),
        Dense(32, activation='relu'),
        Dense(16, activation='relu'),
        Dense(8)  # Regression output
    ])
    
    # Compile model
    model.compile(optimizer='adam', loss='mse', metrics=['mae'])
    
    # Train the model
    model.fit(X_train, y_train, epochs=100, batch_size=16, validation_split=0.1, verbose=0)
    
    # Evaluate model
    loss, mae = model.evaluate(X_test, y_test, verbose=0)
    print(f"\nMean Absolute Error on Test Set: {mae:.2f}")
    
    # Make predictions
    preds = model.predict(X_test[:5])
    print("\nPredictions vs Actual:")
    for i in range(5):
        print(f"Predicted: {preds[i][0]:.2f}, Actual: {y_test.values[i]:.2f}")
    
 
